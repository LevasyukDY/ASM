#include <iostream>

using namespace std;

int main()
{
	setlocale(0, "");

	float arrX[4], arrY[4], arrL[3];
	float P, len, x, y;
	unsigned i;

	cout << "Введите х1,х2,х3:" << endl;
	for (i = 0; i < 3; i++)
		cin >> arrX[i];

	cout << "Введите y1,y2,y3:" << endl;
	for (i = 0; i < 3; i++)
		cin >> arrY[i];

	__asm {
			pusha
			
		// Цикл подсчёта длин треугольника и занесение их в массив arrL
			finit				// Инициализация сопроцессора
			mov   ecx, 3		// Счётчик цикла
			mov   edi, 0		// EDI - индексовый регистр (будет хранить индексы массива)
			fld   [arrX+0]		// Загружает в ST(0) первый эл-т массива arrX
			fstp  [arrX+12]		// Перемещает значение из ST(0) в последний эл-т массива arrX
			fld   [arrY+0]		// Загружает в ST(0) первый эл-т массива arrY
			fstp  [arrY+12]		// Перемещает значение из ST(0) в последний эл-т массива arrY

		LOOP_CALC:
			push  ecx			// Сохраняем значение ECX в стэк, т.к. внутри процедуры... 
								// ...будем работать с регистром CX
			call  CalcLength	// Вызываем подпрограмму подсчёта длины между двумя...
								// ...точками (помещаем в стек адрес следующей команды)
			fld   [len]
			fstp  [arrL+edi]	// Помещаем результат подпрограммы из ST(0) в массив arrL
			add   edi, 4		// Увеличиваем индекс на 4
			pop   ecx			// Извлекаем значение ECX из стэка
			loop  LOOP_CALC		// Конец цикла(декремент регистра ECX; если ECX = 0, то...
								// ...переход к следующей команде после loop)

		// Цикл подсчёта периметра (суммы длин) треугольника
            mov   ecx, 3         // Счётчик цикла
            mov   edi, 4         // EDI - индексовый регистр (будет хранить индексы массива)
			fld   [arrL+0]		 // Помещаем в ST(0) первый эл-т массива arrL
			fstp   ST(1)		 // Копирует число из ST(0) в ST(1)

		LOOP_SUM:
			fld   [arrL+edi]		// Помещаем в ST(0) поочерёдно эл-ты массива arrL
            fadd  ST(0), ST(1)		// Сложение ST(0) = ST(0) + ST(1)
            fst   [len]
			add   edi, 4			// Увеличиваем индекс на 4
            loop  LOOP_SUM			// Конец цикла (декремент регистра ECX; если ECX=0, ...
									// ...то переход к следующей команде после loop)
			fxch  ST(1)				// Меняет местами ST(0) и ST(1)
			fstp  [P]				// Перемещает значение из ST(0) в переменную P
			jmp   END_PROG			// Безусловный переход на конец программы

		CalcLength:
			// sqr(x2 - x1)
			fld   [arrX+edi]		// Загружает в ST(0) первый эл-т массива arrX
			fstp  ST(1)				// Копирует число из ST(0) в ST(1)
			fld   [arrX+edi+4]		// Загружает в ST(0) второй эл-т массива arrX
			fsub  ST(0), ST(1)		// Вычитание первого эл-та из второго ST(0) = ST(0) - ST(1)
			fmul  ST(0), ST(0)		// Возведение в квадрат
			fstp   [x]

			// sqr(y2 - y1)
			fld   [arrY+edi]		// Загружает в ST(0) первый эл-т массива arrY
			fstp   ST(1)			// Копирует число из ST(0) в ST(1)
			fld   [arrY+edi+4]		// Загружает в ST(0) второй эл-т массива arrY
			fsub  ST(0), ST(1)		// Вычитание первого эл-та из второго ST(0) = ST(0) - ST(1)
			fmul  ST(0), ST(0)		// Возведение в квадрат
			fstp   [y]
			
			// sqrt(x + y)
			fld		[x]			
			fstp    ST(1)
			fld     [y]
			fadd	ST(0), ST(1)	// Сложение ST(0) = ST(0) + ST(1)
			fsqrt				    // Вычисляет квадратный корень из ST(0)
			fst		[len]			// Результат из ST(0) помещаем в переменную len
			ret						// Передача управления по адресу, расположенному в 
									// ...вершине стека(адрес помещается в стек командой CALL...
									// ...и его значение соответствует команде, следующей за командой CALL
	   END_PROG:

			popa
	}

	cout << "Периметр: " << P << endl;

	cout << endl << endl;
	system("pause");
	return 0;
}